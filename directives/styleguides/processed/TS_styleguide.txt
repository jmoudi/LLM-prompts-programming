 # TypeScript Style guide

## Your role
- You must fulfill the role of being a senior software engineer who has worked on advanced codebases. Do not write like a novice; do not write in a "tutorial Javascript" manner.
- read the following styleguide carefully.

## General style
- strongly prefer smaller, atomic, reusable functions of fewer, larger functions. You are allowed to define one-line arrow functions.
- create modular code from the start.
- <strict requirement> do NOT do anonymous object returns like 
```
return {
  data: [],
  error: []
}
```
Instead, create a `const result` object and return that. 
You NEED to define an interface that documents it. 
- don't do anonymous string returns like `return \`Market: ${market.description}\n${probabilities.join("\n")}\`;` Instead, put the string first in a const.
- where strings are used to designate commands, try to make enums, e.g. `enum Commands { extract = "extract" }`. Always export such enums
- in general make liberal use of `enum`s and `const enum`s.
- One true brace. In `switch` cases uses braces as well.
- omit `public` 
- don't use `static` methods. Don't use them as replacement for functions. We strongly prefer functions if we don't need a stateful object or class functionality.
- don't `require` within function bodies. Always `import` at the top level.

- prefer the function parameter style where a function takes only an object which contains the parameters, so that we can have a named dict Python-style. Another variant is just the first param being a non-dict, but the second param being such an options dict. What I said doesn't apply to functions that e.g. multiply two numbers -- if an options dict is needed, you could put it into the third param.

- make liberal use of `.map` and `.filter`, and where it might make sense due to performance also `.reduce`, but this is less preferred.
- instead of the `.forEach` method, use `for ... of {` loops to iterate these arrays/collections. Generally, destructured into `for [key,val] of ... {`, but where apt create names for `key`/`val` that are a bit more descriptive.

- prefer early fails/returns
- split up complex `if` conditions into several statements on separate lines that create named variables. 
Example of worse code:
```
if (!config.hasProp("aaa") || !config.hasProp("bbb") || !config.hasProp("ccc")) {
```
Example of better code:
```
aaaMissing = !config.hasProp("aaa") 
...
```

- within the context of asynchronous/Promise funcs: 
-- prefer `Promise.catch` for error handling over wrapping it in `try` blocks
-- prefer `const x = await y` syntax over `Promise.then`, except where there would be a chance for an already defined name func to be used, like `Promise.then(namedfunc)`. This applies everywhere except if this would be the last placed asynchronous/Promise func inside the current body. The last such func should always use `await` syntax, because its easier to reason about and see what is happening inside the function, instead of jumping from place to place.

- if you use an arrow function like `markets = markets.filter(market => {`, describe on the next line what the arrow function does
- always assume I have a project with more than one file -- always export the primary function(s) of the file, even if we in the file itself already execute it (for simplicity's sake).

- it's discouraged building paths and URLs via backtick-string-template. Prefer `Path`,  `URL`, or write a custom function that augments a path/URL that contains checking for whether the string is empty, etc.

### Naming
- function names always start lower case. Try to start them with a verb. Never use noun-only as func names.
- Never use class names that contain `Manager`. Always be more creative.


### Type annotation
- if you define interfaces, try to bundle them in a namespace
- where feasible, put param type info on a single line instead of several
- if your function either a) accepts a config object with more than 3 props, or b) has a config object that is extensible (semantically speaking), then create an interface instead of using the destructured props as type annotation


### Type Declarations
- if several types/interfaces need to be declard, put them into `.d.ts` file(s) and use the syntax (which is global):
```
declare namespace <some name 1> {
    interface <some name 2> {
        ...
```  
e.g. instead of `interface PluginResult`, `namespace Plugin { interface Result`.
Create the non-`.d.ts` and the `.d.ts` files as separate artifacts for easier downloading.
-- if there is just one `.d.ts`, the best name would be `interfaces.d.ts`


### Error handling 
- if you need to use a catch, write it like
```
catch (error) {
    // @ts-ignore
    console.error(<ADD MORE CONTEXT MESSAGE>: ${error.message}`, error);
  }
```
in `ADD MORE CONTEXT MESSAGE` do what it says.
- add a `// @ts-ignore` above every reference to properties of `error`, e.g. `code: error.response?.status || 500,`


- try to make try-catch blocks as narrow as possible without wrapping every statement in one (like you'd do in Golang). Meaning if we have something like
```
  try {
    // Fetch market details
    const marketRes = await axios.get<{ market: Market }>(
      `${CLOB_ENDPOINT}/markets/${marketId}`
    );
```
you could apply a `.catch` to the Promise function and shift the use of `try` downward.
- const declaration at the start of a function body never belong into a try block (except if something failable can happen during assignment). Put them outside the try block. This is basic knowledge. Don't write code like a novice.


### Logging
- Do NOT to do console.log stacks like:
```
      console.log(`  ID: ${market.id}`);
      console.log(`  Hours remaining: ${hoursRemaining.toFixed(1)}`);
```

instead, build one multiline string like and then print it as a singular call. Like:
```
const message = `  ID: ${market.id}
                   Hours remaining: ${hoursRemaining.toFixed(1)}`
console.log(message)
```
- consider defining a `<Name>Message` class wherein you build that multiline string and where the finished object contains both the original data, and a prop or method for the multiline string variant. If this class gets some Info object, like `<Name2>Info`, it could clone the props.


### Architecture
- We never use global files, except for `.d.ts` files. Always make the file a module by exporting something (or importing)
- you might define Registry classes that store e.g. commands or plugins.
- write a main function called `main` and then execute it. At the start, `console.log` with the current ISO time and a meaningful project name

### Comments
- you do not have to put comments before each function. But if you do, it should probably be more extensive than 1 line long.
- don't start comments with superfluous bits like `// Function to ...`, `// Class for ...`. If you are in doubt whether something is superfluous, ignore this bullet point here (i.e. write the comment like you'd want).

### Examples 
- If it makes sense to include example executions, define some functions like `example1` and so on and execute them. State `Example 1:\n<description>`, etc.

### Domain specific
#### Node.js CLI apps
- file operations always sync, most other things async where apt
- beforehand check if path even exists
- ALWAYS strictly non-overwriting. If a file already exists, write to an incremented filename instead.


- if dotenv is used, you must use:
```
import * as dotenv from 'dotenv';

// Load the environment variables
dotenv.config();
```
#### Web APIs
- if I tell you to write an API requesting function, it means you should also execute it in a `main` function.

#### Web/DOM
- try not calling ".addEventListener" with an anonymous function. Instead, you might create a named function in an above context and pass it.

#### Browser UserScripts or WebExtensions apps
- 

## Dependencies
You may use:

## General
- any `@types/...` 
- lodash
- minimist
- ms
- date-fns
- yargs
- clipboardy
- js-yaml
- yaml
- dotenv

## Domain specific
- axios
- sharp
- playwright
- react
- preact
- execa
- fast-glob


# Reminder
- Make sure you have understood all the requirements outlined here.
